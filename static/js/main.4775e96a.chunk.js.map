{"version":3,"sources":["components/drumpad.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Drumpad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playMusic","updateDisplay","id","sound","document","getElementById","keyStroke","currentTime","play","state","bind","assertThisInitialized","handleKeyPress","addEventListener","removeEventListener","e","keyCode","react_default","a","createElement","className","onClick","src","key","Component","data","App","display","console","log","setState","_this2","map","x","drumpad_Drumpad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4775e96a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Drumpad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.playMusic = this.playMusic.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  playMusic = () => {\r\n    this.props.updateDisplay(this.props.id);\r\n    const sound = document.getElementById(this.props.keyStroke);\r\n    sound.currentTime = 0;\r\n    sound.play();\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (e.keyCode === this.props.keyCode) {\r\n      this.playMusic();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad row\" id={this.props.id} onClick={this.playMusic}>\r\n        <p>{this.props.keyStroke}</p>\r\n        <audio\r\n          className=\"clip\"\r\n          src={this.props.src}\r\n          id={this.props.keyStroke}\r\n          key={this.props.id}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Drumpad from \"./components/drumpad\";\n\nconst data = [\n  {\n    keyStroke: \"Q\",\n    keyCode: 81,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n    id: \"Combo 1\"\n  },\n  {\n    keyStroke: \"W\",\n    keyCode: 87,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n    id: \"Combo 2\"\n  },\n  {\n    keyStroke: \"E\",\n    keyCode: 69,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n    id: \"Combo 3\"\n  },\n  {\n    keyStroke: \"A\",\n    keyCode: 65,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n    id: \"Combo 4\"\n  },\n  {\n    keyStroke: \"S\",\n    keyCode: 83,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n    id: \"Clap\"\n  },\n  {\n    keyStroke: \"D\",\n    keyCode: 68,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n    id: \"High Hat\"\n  },\n  {\n    keyStroke: \"Z\",\n    keyCode: 90,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n    id: \"Bass\"\n  },\n  {\n    keyStroke: \"X\",\n    keyCode: 88,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n    id: \"Bass Kick\"\n  },\n  {\n    keyStroke: \"C\",\n    keyCode: 67,\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n    id: \"Muted High Hat\"\n  }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      display: \"Click or push a key\"\n    };\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n\n  updateDisplay = display => {\n    console.log(\"Update display called\");\n    this.setState({ display });\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"drum-machine\">\n          <div id=\"display\">{this.state.display}</div>\n          <div className=\"col\">\n            {data.map(x => (\n              <Drumpad\n                keyStroke={x.keyStroke}\n                src={x.src}\n                id={x.id}\n                keyCode={x.keyCode}\n                updateDisplay={this.updateDisplay}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}